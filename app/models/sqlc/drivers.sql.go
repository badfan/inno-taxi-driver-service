// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: drivers.sql

package sqlc

import (
	"context"
)

const createDriver = `-- name: CreateDriver :one
INSERT INTO drivers (name, phone_number, email, password, taxi_type)
VALUES ($1, $2, $3, $4, $5) RETURNING id, driver_uuid, name, phone_number, email, password, taxi_type, is_busy, driver_rating, created_at, updated_at
`

type CreateDriverParams struct {
	Name        string   `json:"name"`
	PhoneNumber string   `json:"phone_number"`
	Email       string   `json:"email"`
	Password    string   `json:"password"`
	TaxiType    TaxiType `json:"taxi_type"`
}

func (q *Queries) CreateDriver(ctx context.Context, arg CreateDriverParams) (Driver, error) {
	row := q.db.QueryRowContext(ctx, createDriver,
		arg.Name,
		arg.PhoneNumber,
		arg.Email,
		arg.Password,
		arg.TaxiType,
	)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.DriverUuid,
		&i.Name,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.TaxiType,
		&i.IsBusy,
		&i.DriverRating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteDriver = `-- name: DeleteDriver :exec
DELETE FROM drivers
WHERE id = $1
`

func (q *Queries) DeleteDriver(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteDriver, id)
	return err
}

const getDriverByID = `-- name: GetDriverByID :one
SELECT id, driver_uuid, name, phone_number, email, password, taxi_type, is_busy, driver_rating, created_at, updated_at FROM drivers
WHERE id = $1
`

func (q *Queries) GetDriverByID(ctx context.Context, id int32) (Driver, error) {
	row := q.db.QueryRowContext(ctx, getDriverByID, id)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.DriverUuid,
		&i.Name,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.TaxiType,
		&i.IsBusy,
		&i.DriverRating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDriverByPhoneAndPassword = `-- name: GetDriverByPhoneAndPassword :one
SELECT id, driver_uuid, name, phone_number, email, password, taxi_type, is_busy, driver_rating, created_at, updated_at FROM drivers
WHERE phone_number = $1 AND password = $2
`

type GetDriverByPhoneAndPasswordParams struct {
	PhoneNumber string `json:"phone_number"`
	Password    string `json:"password"`
}

func (q *Queries) GetDriverByPhoneAndPassword(ctx context.Context, arg GetDriverByPhoneAndPasswordParams) (Driver, error) {
	row := q.db.QueryRowContext(ctx, getDriverByPhoneAndPassword, arg.PhoneNumber, arg.Password)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.DriverUuid,
		&i.Name,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.TaxiType,
		&i.IsBusy,
		&i.DriverRating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getDriverIDByPhone = `-- name: GetDriverIDByPhone :one
SELECT id FROM drivers
WHERE phone_number = $1
`

func (q *Queries) GetDriverIDByPhone(ctx context.Context, phoneNumber string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getDriverIDByPhone, phoneNumber)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getDriverRatingByID = `-- name: GetDriverRatingByID :one
SELECT driver_rating FROM drivers
WHERE id = $1
`

func (q *Queries) GetDriverRatingByID(ctx context.Context, id int32) (float32, error) {
	row := q.db.QueryRowContext(ctx, getDriverRatingByID, id)
	var driver_rating float32
	err := row.Scan(&driver_rating)
	return driver_rating, err
}

const getDriverStatusByID = `-- name: GetDriverStatusByID :one
SELECT is_busy FROM drivers
WHERE id = $1
`

func (q *Queries) GetDriverStatusByID(ctx context.Context, id int32) (bool, error) {
	row := q.db.QueryRowContext(ctx, getDriverStatusByID, id)
	var is_busy bool
	err := row.Scan(&is_busy)
	return is_busy, err
}

const getDrivers = `-- name: GetDrivers :many
SELECT id, driver_uuid, name, phone_number, email, password, taxi_type, is_busy, driver_rating, created_at, updated_at FROM drivers
`

func (q *Queries) GetDrivers(ctx context.Context) ([]Driver, error) {
	rows, err := q.db.QueryContext(ctx, getDrivers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Driver
	for rows.Next() {
		var i Driver
		if err := rows.Scan(
			&i.ID,
			&i.DriverUuid,
			&i.Name,
			&i.PhoneNumber,
			&i.Email,
			&i.Password,
			&i.TaxiType,
			&i.IsBusy,
			&i.DriverRating,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDriver = `-- name: UpdateDriver :one
UPDATE drivers
SET name = $1, phone_number = $2, email = $3, password = $4, taxi_type = $5
WHERE id=$6 RETURNING id, driver_uuid, name, phone_number, email, password, taxi_type, is_busy, driver_rating, created_at, updated_at
`

type UpdateDriverParams struct {
	Name        string   `json:"name"`
	PhoneNumber string   `json:"phone_number"`
	Email       string   `json:"email"`
	Password    string   `json:"password"`
	TaxiType    TaxiType `json:"taxi_type"`
	ID          int32    `json:"id"`
}

func (q *Queries) UpdateDriver(ctx context.Context, arg UpdateDriverParams) (Driver, error) {
	row := q.db.QueryRowContext(ctx, updateDriver,
		arg.Name,
		arg.PhoneNumber,
		arg.Email,
		arg.Password,
		arg.TaxiType,
		arg.ID,
	)
	var i Driver
	err := row.Scan(
		&i.ID,
		&i.DriverUuid,
		&i.Name,
		&i.PhoneNumber,
		&i.Email,
		&i.Password,
		&i.TaxiType,
		&i.IsBusy,
		&i.DriverRating,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
